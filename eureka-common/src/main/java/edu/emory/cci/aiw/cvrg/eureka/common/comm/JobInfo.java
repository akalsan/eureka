package edu.emory.cci.aiw.cvrg.eureka.common.comm;

import java.sql.Date;
import java.util.ArrayList;
import java.util.List;

import javax.xml.bind.annotation.XmlRootElement;

import edu.emory.cci.aiw.cvrg.eureka.common.entity.FileError;
import edu.emory.cci.aiw.cvrg.eureka.common.entity.FileUpload;
import edu.emory.cci.aiw.cvrg.eureka.common.entity.FileWarning;
import edu.emory.cci.aiw.cvrg.eureka.common.entity.Job;
import edu.emory.cci.aiw.cvrg.eureka.common.entity.JobEvent;

/**
 * A communication bean to transfer information about a user's job.
 * 
 * @author hrathod
 * 
 */
@XmlRootElement
public class JobInfo {
	/**
	 * The total number of steps in the process.
	 */
	private final int TOTAL_STEPS = 1;
	/**
	 * The file upload for the job being processed.
	 */
	private final FileUpload fileUpload;
	/**
	 * The actual running job, if the file upload/validation/processing is
	 * complete.
	 */
	private final Job job;

	/**
	 * Instantiate with a FileUpload object, and a null job.
	 * 
	 * @param inFileUpload
	 */
	public JobInfo(FileUpload inFileUpload) {
		this(inFileUpload, null);
	}

	/**
	 * Instantiate with a Job object, and a null file upload.
	 * 
	 * @param inJob
	 */
	public JobInfo(Job inJob) {
		this(null, inJob);
	}

	/**
	 * Instantiate with both the given file upload and the given job.
	 * 
	 * @param inFileUpload
	 * @param inJob
	 */
	private JobInfo(FileUpload inFileUpload, Job inJob) {
		this.job = inJob;
		this.fileUpload = inFileUpload;
	}

	/**
	 * Get the total number of steps in the process.
	 * 
	 * @return The total number of steps in the process.
	 */
	public int getTotalSteps() {
		return this.TOTAL_STEPS;
	}

	/**
	 * Get the processing step for the file upload or job.
	 * 
	 * @return The process step that the job is currently on.
	 */
	public int getCurrentStep() {
		// TODO: GET THE ACTUAL STEP NUBERS AND JOB STATUS STRINGS.
		int step = 0;
		// we do this in descending order
		if (this.job != null) {
			JobEvent event = this.getLatestJobEvent();
			if (event.getState() == "complete") {
				step = 10;
			} else if (event.getState() == "xxx") {
				step = 9;
			}
		} else {
			if (this.fileUpload.isCompleted()) {
				step = 3;
			} else if (this.fileUpload.isProcessed()) {
				step = 2;
			} else if (this.fileUpload.isValidated()) {
				step = 1;
			}
		}
		return step;
	}

	/**
	 * Get a list of messages for the job, including those generated by the file
	 * validation, as well as the running of the job itself.
	 * 
	 * @return The list of messages for the job.
	 */
	public List<String> getMessages() {
		List<String> messages;
		if (this.fileUpload == null) {
			messages = this.getJobMessages();
		} else {
			messages = this.getFileUploadMessages();
		}
		return messages;
	}

	/**
	 * Return a list of messages generated by the file upload validation.
	 * 
	 * @return The list of messages.
	 */
	public List<String> getFileUploadMessages() {
		List<String> messsages = new ArrayList<String>();
		for (FileWarning fileWarning : this.fileUpload.getWarnings()) {
			messsages.add(fileWarning.toString());
		}
		for (FileError error : this.fileUpload.getErrors()) {
			messsages.add(error.toString());
		}
		return messsages;
	}

	/**
	 * Return a list of messages generated by the job.
	 * 
	 * @return The list of messages.
	 */
	public List<String> getJobMessages() {
		List<String> messages = new ArrayList<String>();
		for (JobEvent event : this.job.getJobEvents()) {
			messages.add(event.getMessage());
		}
		return messages;
	}

	/**
	 * Get the latest known event for the job.
	 * 
	 * @return The latest known event.
	 */
	private JobEvent getLatestJobEvent() {
		Date currentMaxDate = null;
		JobEvent maxEvent = null;
		for (JobEvent event : this.job.getJobEvents()) {
			if (maxEvent == null) {
				maxEvent = event;
			} else {
				if (event.getTimeStamp().after(currentMaxDate)) {
					maxEvent = event;
				}
			}
		}
		return maxEvent;
	}
}
