package edu.emory.cci.aiw.cvrg.eureka.common.comm;

/*
 * #%L
 * Eureka Common
 * %%
 * Copyright (C) 2012 - 2013 Emory University
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
import edu.emory.cci.aiw.cvrg.eureka.common.entity.JobEvent;
import edu.emory.cci.aiw.cvrg.eureka.common.entity.JobEventType;
import org.apache.commons.lang3.builder.ToStringBuilder;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 *
 * @author Andrew Post
 */
public class Job {

	private Long id;
	/**
	 * The initial timestamp when the job was started.
	 */
	private Date timestamp;
	/**
	 * The unique identifier of the configuration to use for this job.
	 */
	private String sourceConfigId;
	/**
	 * The unique identifier of the configuration to use for this job.
	 */
	private String destinationId;
	private String username;
	private JobEventType state;
	private List<JobEvent> jobEvents;
	
	private List<Link> links;

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public Date getTimestamp() {
		return timestamp;
	}

	public void setTimestamp(Date timestamp) {
		this.timestamp = timestamp;
	}

	public String getSourceConfigId() {
		return sourceConfigId;
	}

	public void setSourceConfigId(String sourceConfigId) {
		this.sourceConfigId = sourceConfigId;
	}

	public String getDestinationId() {
		return destinationId;
	}

	public void setDestinationId(String destinationId) {
		this.destinationId = destinationId;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public JobEventType getState() {
		return state;
	}

	public void setState(JobEventType state) {
		this.state = state;
	}

	/**
	 * Gets job events, assumed in order of occurrence.
	 * @return a {@link List} of job events.
	 */
	public List<JobEvent> getJobEvents() {
		return jobEvents;
	}

	/**
	 * Sets job events, assumed in order of occurrence.
	 * @param jobEvents a {@link List} of job events.
	 */
	public void setJobEvents(List<JobEvent> jobEvents) {
		this.jobEvents = jobEvents;
	}

	public List<Link> getLinks() {
		return links;
	}

	public void setLinks(List<Link> links) {
		this.links = links;
	}
	
	/**
	 * Return a list of messages generated by the job.
	 *
	 * @return The list of messages.
	 */
	public List<String> messages() {
		final List<String> messages = new ArrayList<>();
		for (JobEvent event : this.jobEvents) {
			final String message = event.getMessage();
			if (message != null) {
				messages.add(message);
			}
		}
		return messages;
	}

	public JobStatus toJobStatus() {
		JobStatus jobStatus = new JobStatus();
		jobStatus.setState(getState());
		jobStatus.setMessages(messages());
		jobStatus.setStartedDate(getTimestamp());
		jobStatus.setLinks(getLinks());
		jobStatus.setSourceConfigId(getSourceConfigId());
		jobStatus.setDestinationId(getDestinationId());
		if (this.jobEvents != null) {
			for (JobEvent jobEvent : this.jobEvents) {
				if (jobEvent.getState() == JobEventType.COMPLETED
						|| jobEvent.getState() == JobEventType.FAILED) {
					jobStatus.setFinishedDate(jobEvent.getTimeStamp());
					break;
				}
			}
		}
		return jobStatus;
	}

	@Override
	public String toString() {
		return ToStringBuilder.reflectionToString(this);
	}
}
